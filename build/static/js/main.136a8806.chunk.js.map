{"version":3,"sources":["services/notes.js","components/Notes.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Note","note","toggleImportance","removeBook","label","important","className","content","onClick","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","SetShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","onSubmit","event","preventDefault","NoteObject","date","Date","toISOString","Math","random","returnedNote","concat","type","placeholder","onChange","target","value","map","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.136a8806.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nconst remove = (id, newObject) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update, remove}\r\n","import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance, removeBook }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n  const label2 = 'delete'\r\n\r\n  return (\r\n    <div className=\"reversedDiv\">\r\n    <ul>\r\n    <li className = \"note\">\r\n      James Park <span className = \"tag\">@jams_park</span>\r\n      <br></br>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n      <button onClick={removeBook}>{label2}</button>\r\n    </li>\r\n    </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Notes'\n\nconst Button = ({command, text}) => (\n  <button onClick={command} className = \"button\">{text}</button>\n)\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className = \"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('Book title')\n  const [showAll, SetShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(\"Some error happened..\")\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log(\"render\", notes.length, \"notes\")\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const NoteObject = {\n      content: newNote,\n      date: new Date().toISOString,\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(NoteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n    .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })    \n  }\n\n  const removeBook = id => {\n    const note = notes.find(n => n.id === id)\n  \n    noteService\n    .remove(id, note)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })    \n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const handle_note_change = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Twitter Clone:</h1>\n      <Notification message={errorMessage}/>\n      <form onSubmit={addNote}>\n        <input type=\"text\"\n          placeholder = \"What's happening...\"\n          onChange = {handle_note_change}\n        />\n      </form>\n      <button className = \"submit\" type=\"submit\">Tweet</button>\n      <div>\n          <button className = \"show\" onClick={() => SetShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note \n          key={note.id} \n          note={note}\n          toggleImportance={() => toggleImportanceOf(note.id)}\n          removeBook={() => removeBook(note.id)}\n          />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}